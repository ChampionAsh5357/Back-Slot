buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id 'signing'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven {
        url 'https://www.dogforce-games.com/maven/'
    }
}

String semver = version_major + "." + version_api + "." + version_minor
version = mc + "-" + semver + "." + version_patch
group = website // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = modId

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
	api
	main
	main.resources.srcDirs += 'src/generated/resources'
}

configurations {
	apiCompile.extendsFrom(compile)
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: mappingsChannel
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                backslot {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                backslot {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'backslot', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                backslot {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:" + mc + "-" + forge
    implementation sourceSets.api.output
}

jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.api.output.classesDirs
	from sourceSets.main.output.resourcesDir
	from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
            "Specification-Title": "Back Slot",
            "Specification-Vendor": "ChampionAsh5357",
            "Specification-Version": semver,
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"ChampionAsh5357",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

/*def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}*/

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.api.output
	from sourceSets.api.allJava
}

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}

task("uploadJars", dependsOn: "build") {
	apply plugin: "maven"
	uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: "file://${local_maven}")
				pom.project {
					name = "Back Slot"
					description = "What's on your back?"
					licenses {
						license {
        					name = "GNU Lesser General Public License v3.0"
        					url = "https://www.gnu.org/licenses/lgpl-3.0.html"
        				}
        			}
        			developers {
        				developer {
        					name = "ChampionAsh5357"
        				}
        			}
				}
			}
		}
	}
}

signing {
    sign configurations.archives
}

processResources {
	inputs.property 'version', project.version

	from(sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'

		expand 'version': project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}